{"ast":null,"code":"var _jsxFileName = \"/Users/michaelrodriguez/Documents/OnlineProjects/Code/BrecklynsWebsite/portfolio/src/components/Rock/Rock.jsx\";\nimport React, { Component } from 'react';\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OrbitControls = require('three-orbit-controls')(THREE);\n\nclass Rock extends Component {\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0x7e31eb\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    var controls = new THREE.OrbitControls(camera, render.domElement);\n    controls.enableDamping = true;\n    controls.campingFactor = 0.25;\n    controls.enableZoom = true;\n    const light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n    scene.add(light);\n    camera.position.z = 2;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      cube.rotation.z += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref => this.mount = ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Rock;","map":{"version":3,"sources":["/Users/michaelrodriguez/Documents/OnlineProjects/Code/BrecklynsWebsite/portfolio/src/components/Rock/Rock.jsx"],"names":["React","Component","THREE","OrbitControls","require","Rock","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshStandardMaterial","color","cube","Mesh","add","controls","render","enableDamping","campingFactor","enableZoom","light","HemisphereLight","position","z","animate","requestAnimationFrame","rotation","x","y","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCF,KAAhC,CAAtB;;AACA,MAAMG,IAAN,SAAmBJ,SAAnB,CAA6B;AAGzBK,EAAAA,iBAAiB,GAAG;AAEhB,QAAIC,KAAK,GAAG,IAAIL,KAAK,CAACM,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIP,KAAK,CAACQ,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIZ,KAAK,CAACa,aAAV,EAAf;AAEAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACA,SAAKI,KAAL,CAAWC,WAAX,CAAwBJ,QAAQ,CAACK,UAAjC;AAEA,QAAIC,QAAQ,GAAG,IAAIlB,KAAK,CAACmB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,oBAAV,CAAgC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAhC,CAAf;AACA,QAAIC,IAAI,GAAG,IAAIvB,KAAK,CAACwB,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AACAf,IAAAA,KAAK,CAACoB,GAAN,CAAWF,IAAX;AACA,QAAIG,QAAQ,GAAG,IAAI1B,KAAK,CAACC,aAAV,CAAwBM,MAAxB,EAA+BoB,MAAM,CAACV,UAAtC,CAAf;AACRS,IAAAA,QAAQ,CAACE,aAAT,GAAyB,IAAzB;AACAF,IAAAA,QAAQ,CAACG,aAAT,GAAyB,IAAzB;AACAH,IAAAA,QAAQ,CAACI,UAAT,GAAsB,IAAtB;AACQ,UAAMC,KAAK,GAAG,IAAI/B,KAAK,CAACgC,eAAV,CAA2B,QAA3B,EAAqC,QAArC,EAA+C,CAA/C,CAAd;AACA3B,IAAAA,KAAK,CAACoB,GAAN,CAAWM,KAAX;AACRxB,IAAAA,MAAM,CAAC0B,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AAIA,QAAIC,OAAO,GAAG,YAAY;AACdC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAZ,MAAAA,IAAI,CAACc,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAf,MAAAA,IAAI,CAACc,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAhB,MAAAA,IAAI,CAACc,QAAL,CAAcH,CAAd,IAAmB,IAAnB;AACAtB,MAAAA,QAAQ,CAACe,MAAT,CAAiBtB,KAAjB,EAAwBE,MAAxB;AACH,KANT;;AAOQ4B,IAAAA,OAAO;AAEV;;AAGDR,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,GAAG,EAAEa,GAAG,IAAK,KAAKzB,KAAL,GAAayB;AAA/B;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH;;AA3CwB;;AA8C7B,eAAerC,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from \"three\";\nconst OrbitControls = require('three-orbit-controls')(THREE);\nclass Rock extends Component {\n\n\n    componentDidMount() {\n\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new THREE.WebGLRenderer();\n       \n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.mount.appendChild( renderer.domElement );\n      \n        var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n        var material = new THREE.MeshStandardMaterial( { color: 0x7e31eb } );\n        var cube = new THREE.Mesh( geometry, material );\n        scene.add( cube );\n        var controls = new THREE.OrbitControls(camera,render.domElement);\ncontrols.enableDamping = true; \ncontrols.campingFactor = 0.25; \ncontrols.enableZoom = true; \n        const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n        scene.add( light );\ncamera.position.z = 2;\n\n\n\nvar animate = function () {\n            requestAnimationFrame( animate );\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n            cube.rotation.z += 0.01;\n            renderer.render( scene, camera );\n        };\n        animate();\n        \n    }\n\n   \n    render() {\n        return (\n            <div ref={ref => (this.mount = ref)} />\n         \n        )\n    }\n}\n\nexport default Rock;"]},"metadata":{},"sourceType":"module"}